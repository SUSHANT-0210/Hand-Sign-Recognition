# -*- coding: utf-8 -*-
"""Hand Sign Recognition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g629Z4AxwHnw646Pk_uPwv1su4wbqwNG

# Importing Libraries
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Data Preprocessing

**1. Loading the Data**
"""

dataset_train=pd.read_csv('sign_mnist_train.csv')
dataset_test=pd.read_csv('sign_mnist_test.csv')

"""**2. Splitting in X and Y**"""

X_train= dataset_train.drop(columns=['label']).values
y_train = dataset_train['label'].values
X_test= dataset_test.drop(columns=['label']).values
y_test = dataset_test['label'].values

"""**3. Reshaping X for CNN and normalizing it**"""

X_train= X_train.reshape(-1, 28, 28, 1)
X_train = X_train/ 255.0

X_test= X_test.reshape(-1, 28, 28, 1)
X_test = X_test/ 255.0

"""# Initializing CNN


"""

cnn=tf.keras.models.Sequential()

"""**STEP-1 Convolution**"""

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=2,activation='relu',input_shape=[28,28,1]))

"""**STEP-2 Pooling**"""

cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

"""**Adding another layer**"""

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=2,activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

"""**STEP-3 Flattening**"""

cnn.add(tf.keras.layers.Flatten())

"""**STEP-4 Full Connection**"""

cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

"""**STEP-5 Dropout Layer**"""

cnn.add(tf.keras.layers.Dropout(rate=0.2))

"""**STEP-6 Output Layer**"""

cnn.add(tf.keras.layers.Dense(units=26,activation='softmax'))

"""# Training the CNN

**1. Compiling the CNN**
"""

cnn.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

"""**2. Training the CNN on traing set and evaluating it in the Test Set**"""

history=cnn.fit(x=X_train, y=y_train, validation_data=(X_test, y_test), epochs=10)

"""# Plotting Graphs of Accuracy and loss for Analysis"""

# Plot training history
plt.figure(figsize=(12, 5))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Testing Accuracy and Loss')
plt.legend()

plt.tight_layout()
plt.show()

"""# Model Visualization"""

from tensorflow.keras.utils import plot_model
from IPython.display import Image

plot_model(cnn, to_file='model.png', show_shapes=True, show_layer_names=True)
Image('model.png')

"""# Anding new dropout layer with rate 0.3 and accessing the results"""

cnn1=tf.keras.models.Sequential()
cnn1.add(tf.keras.layers.Conv2D(filters=32,kernel_size=2,activation='relu',input_shape=[28,28,1]))
cnn1.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))
cnn1.add(tf.keras.layers.Conv2D(filters=32,kernel_size=2,activation='relu'))
cnn1.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))
cnn1.add(tf.keras.layers.Flatten())
cnn1.add(tf.keras.layers.Dense(units=128, activation='relu'))
cnn1.add(tf.keras.layers.Dropout(rate=0.2))
cnn1.add(tf.keras.layers.Dropout(rate=0.3))
cnn1.add(tf.keras.layers.Dense(units=26,activation='softmax'))
cnn1.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history=cnn1.fit(x=X_train, y=y_train, validation_data=(X_test, y_test), epochs=10)

# Plot training history
plt.figure(figsize=(12, 5))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Testing Accuracy and Loss')
plt.legend()

plt.tight_layout()
plt.show()

"""# Model Visualization"""

plot_model(cnn1, to_file='model.png', show_shapes=True, show_layer_names=True)
Image('model.png')